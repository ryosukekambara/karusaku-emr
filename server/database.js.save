const mysql = require('mysql2/promise');
require('dotenv').config();

// PostgreSQL接続情報（DATABASE_URLから取得）
const pool = mysql.createPool({
  uri: process.env.DATABASE_URL,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

async function initializeDatabase() {
  try {
    const connection = await pool.getConnection();
    
    // usersテーブル
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        name VARCHAR(255) NOT NULL,
        role VARCHAR(50) NOT NULL,
        department VARCHAR(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // 他のテーブルも同様に作成...

    connection.release();
    console.log('データベース初期化完了');
  } catch (error) {
    console.error('データベース初期化エラー:', error);
    throw error;
  }
}

module.exports = { pool, initializeDatabase };const sqlite3 = require('sqlite3').verbose();
const path = require('path');
require('dotenv').config();

// SQLiteデータベースファイルのパス
const dbPath = path.join(__dirname, 'medical_records.db');

// データベース接続
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('データベース接続エラー:', err.message);
    process.exit(1);
  } else {
    console.log('SQLiteデータベースに接続しました');
  }
});

// MySQL互換のpoolオブジェクトを作成
const pool = {
  execute: (query, params = []) => {
    return new Promise((resolve, reject) => {
      if (query.trim().toUpperCase().startsWith('SELECT')) {
        db.all(query, params, (err, rows) => {
          if (err) reject(err);
          else resolve([rows]);
        });
      } else {
        db.run(query, params, function(err) {
          if (err) reject(err);
          else resolve([{ insertId: this.lastID }]);
        });
      }
    });
  },
  getConnection: () => {
    return Promise.resolve({
      execute: pool.execute,
      release: () => Promise.resolve()
    });
  },
  end: () => {
    return new Promise((resolve) => {
      db.close((err) => {
        if (err) console.error('データベースクローズエラー:', err);
        else console.log('データベース接続を閉じました');
        resolve();
      });
    });
  }
};

// データベース初期化
async function initializeDatabase() {
  try {
    const connection = await pool.getConnection();
    
    // スタッフテーブル
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS staff (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        name TEXT NOT NULL,
        role TEXT NOT NULL CHECK (role IN ('master', 'staff')),
        department TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // 患者テーブル
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS patients (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        kana TEXT,
        birth_date TEXT,
        gender TEXT CHECK (gender IN ('male', 'female', 'other')),
        phone TEXT,
        email TEXT,
        address TEXT,
        emergency_contact TEXT,
        medical_history TEXT,
        allergies TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // 施術記録テーブル
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS medical_records (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        patient_id INTEGER NOT NULL,
        staff_id INTEGER NOT NULL,
        treatment_date TEXT NOT NULL,
        treatment_type TEXT NOT NULL,
        symptoms TEXT,
        diagnosis TEXT,
        treatment_content TEXT,
        notes TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,
        FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE
      )
    `);

    // 予約テーブル
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS appointments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        patient_id INTEGER NOT NULL,
        staff_id INTEGER NOT NULL,
        appointment_date TEXT NOT NULL,
        treatment_type TEXT,
        status TEXT DEFAULT 'scheduled' CHECK (status IN ('scheduled', 'completed', 'cancelled')),
        notes TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,
        FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE
      )
    `);

    // 初期スタッフデータの挿入
    const bcrypt = require('bcryptjs');
    const defaultPassword = await bcrypt.hash('admin123', 10);
    
    await connection.execute(`
      INSERT OR IGNORE INTO staff (username, password, name, role, department) 
      VALUES ('admin', ?, '管理者', 'master', '管理部')
    `, [defaultPassword]);

    connection.release();
    console.log('データベーススキーマが初期化されました');
  } catch (error) {
    console.error('データベース初期化エラー:', error);
    throw error;
  }
}

module.exports = { pool, initializeDatabase };
